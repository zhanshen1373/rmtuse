package com.hayden.hap.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hayden.hap.common.dao.dBEntity.LoginHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_HISTORY".
*/
public class LoginHistoryDao extends AbstractDao<LoginHistory, String> {

    public static final String TABLENAME = "LOGIN_HISTORY";

    /**
     * Properties of entity LoginHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Usercode = new Property(0, String.class, "usercode", true, "USERCODE");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property LoginTime = new Property(2, java.util.Date.class, "loginTime", false, "LOGIN_TIME");
        public final static Property IsAuto = new Property(3, boolean.class, "isAuto", false, "IS_AUTO");
    }


    public LoginHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public LoginHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_HISTORY\" (" + //
                "\"USERCODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: usercode
                "\"PASSWORD\" TEXT," + // 1: password
                "\"LOGIN_TIME\" INTEGER," + // 2: loginTime
                "\"IS_AUTO\" INTEGER NOT NULL );"); // 3: isAuto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginHistory entity) {
        stmt.clearBindings();
 
        String usercode = entity.getUsercode();
        if (usercode != null) {
            stmt.bindString(1, usercode);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        java.util.Date loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindLong(3, loginTime.getTime());
        }
        stmt.bindLong(4, entity.getIsAuto() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginHistory entity) {
        stmt.clearBindings();
 
        String usercode = entity.getUsercode();
        if (usercode != null) {
            stmt.bindString(1, usercode);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        java.util.Date loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindLong(3, loginTime.getTime());
        }
        stmt.bindLong(4, entity.getIsAuto() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LoginHistory readEntity(Cursor cursor, int offset) {
        LoginHistory entity = new LoginHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // usercode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // loginTime
            cursor.getShort(offset + 3) != 0 // isAuto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginHistory entity, int offset) {
        entity.setUsercode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIsAuto(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(LoginHistory entity, long rowId) {
        return entity.getUsercode();
    }
    
    @Override
    public String getKey(LoginHistory entity) {
        if(entity != null) {
            return entity.getUsercode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginHistory entity) {
        return entity.getUsercode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
